name: Test

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  # release:
  #   types: [published, created]

jobs:
  test_mcp:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run MCP server tests (Docker Compose)
        run: docker compose up --build --abort-on-container-exit test_mcp
      - name: Upload MCP test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mcp-test-results
          path: .

  test_scraper:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run scraper tests (Docker Compose)
        run: docker compose up --build --abort-on-container-exit test_scraper
      - name: Upload scraper test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: scraper-test-results
          path: .

  coverage:
    runs-on: ubuntu-latest
    needs: [test_mcp, test_scrapper]
    steps:
      - uses: actions/checkout@v3
      - name: Build Docker image for coverage
        run: docker compose build test
      - name: Run coverage in container
        run: docker compose run --rm -T -v ${{ github.workspace }}:/app test pytest --cov=src --cov-report=term --cov-report=json:/app/coverage.json
      - name: Extract coverage percent
        run: |
          COVERAGE=$(python -c "import json; print(json.load(open('coverage.json'))['totals']['percent_covered_display'])")
          echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV
      - name: Update coverage badge
        uses: schneegans/dynamic-badges-action@v1.6.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: d3ad29ac6775300b8475b9cedd434ae2
          filename: gistfile1.txt
          label: coverage
          message: ${{ env.COVERAGE }}%
          color: green

  tests-badge:
    runs-on: ubuntu-latest
    needs: [test_mcp, test_scrapper]
    steps:
      - name: Set test status
        run: |
          MCP_RESULT="${{ needs.test_mcp.result }}"
          SCRAPER_RESULT="${{ needs.test_scraper.result }}"
          if [ "$MCP_RESULT" = "success" ] && [ "$SCRAPER_RESULT" = "success" ]; then
            echo "TEST_STATUS=passing" >> $GITHUB_ENV
            echo "COLOR=green" >> $GITHUB_ENV
          elif [ "$MCP_RESULT" = "failure" ] && [ "$SCRAPER_RESULT" = "failure" ]; then
            echo "TEST_STATUS=failing" >> $GITHUB_ENV
            echo "COLOR=red" >> $GITHUB_ENV
          else
            echo "TEST_STATUS=partial" >> $GITHUB_ENV
            echo "COLOR=yellow" >> $GITHUB_ENV
          fi
      - name: Update test status badge
        uses: schneegans/dynamic-badges-action@v1.6.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: 15392260e0e9be9f6f72ae5cf3182743
          filename: gistfile1.txt
          label: tests
          message: ${{ env.TEST_STATUS }}
          color: ${{ env.COLOR }} 